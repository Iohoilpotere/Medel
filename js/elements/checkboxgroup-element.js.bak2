import { registry } from '../core/registry.js';
import { BaseElement } from './base-element.js';

export class CheckboxGroupElement extends BaseElement{
  constructor(opts={}){
    super(opts);
    this.setProp('fontFamily', opts.fontFamily ?? 'System');
    this.setProp('fontWeight', Number.isFinite(opts.fontWeight)? opts.fontWeight : 400);
    this.setProp('italic', !!opts.italic);
    this.setProp('fontSize', Number.isFinite(opts.fontSize)? opts.fontSize : 16);
    this.setProp('fontSizeUnit', opts.fontSizeUnit ?? 'px');
    this.setProp('letterSpacing', Number.isFinite(opts.letterSpacing)? opts.letterSpacing : 0);
    this.setProp('lineHeight', Number.isFinite(opts.lineHeight)? opts.lineHeight : 1.2);
    this.setProp('shadowColor', opts.shadowColor ?? 'rgba(0,0,0,0.5)');
    this.setProp('shadowDx', Number.isFinite(opts.shadowDx)? opts.shadowDx : 0);
    this.setProp('shadowDy', Number.isFinite(opts.shadowDy)? opts.shadowDy : 0);
    this.setProp('shadowBlur', Number.isFinite(opts.shadowBlur)? opts.shadowBlur : 6);
    this.setProp('strokeColor', opts.strokeColor ?? null);
    this.setProp('strokeWidth', Number.isFinite(opts.strokeWidth)? opts.strokeWidth : 0);
    this.setProp('items', Array.isArray(opts.items)? opts.items : ['Opzione A','Opzione B']);
    this.setProp('values', Array.isArray(opts.values)? opts.values : []);
    this.setProp('itemStyles', opts.itemStyles ?? {});
    this.setProp('styleScope', Number.isInteger(opts.styleScope)? opts.styleScope : -1);
  }
  updateDom(){
    super.updateDom();
    if(!this.content) return;
    this.content.innerHTML='';
    const wrap = document.createElement('div');
    // Pills style rendering
    if((this.getProp('selectionStyle')||'standard')==='pills'){
      wrap.style.display='flex'; wrap.style.flexWrap='wrap';
      const zoom = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
      const gapPx = Number.isFinite(this.getProp('itemsGap'))? Number(this.getProp('itemsGap')): 6;
      const addGap = Number(this.getProp('labelGap')||0);
      const dir = this.getProp('itemsDirection') || 'vertical';
      if(dir==='horizontal'){
        wrap.style.columnGap = String((gapPx+addGap)*zoom)+'px';
        wrap.style.rowGap = String(gapPx*zoom)+'px';
      }else{
        wrap.style.rowGap = String((gapPx+addGap)*zoom)+'px';
        wrap.style.columnGap = String(gapPx*zoom)+'px';
      }
      const items = this.getProp('items') || [];
      const valuesSet = new Set(this.getProp('values') || []);
      items.forEach((txt,i)=>{
        const b=document.createElement('button'); b.type='button'; b.textContent=String(txt);
        const on = valuesSet.has(i);
        const ov = (this.getProp('itemStyles')||{})[i] || {};
        const padY = Number.isFinite(this.getProp('pillPadY'))? this.getProp('pillPadY'):6;
        const padX = Number.isFinite(this.getProp('pillPadX'))? this.getProp('pillPadX'):10;
        b.style.padding = String(padY*zoom)+'px '+String(padX*zoom)+'px';
        const radius = Number.isFinite(this.getProp('pillRadius'))? this.getProp('pillRadius'):999; b.style.borderRadius = String(radius*zoom)+'px';
        const bc = this.getProp('pillBorderColor') || 'rgba(255,255,255,0.3)'; const bw = Number.isFinite(this.getProp('pillBorderWidth'))? this.getProp('pillBorderWidth'):1; b.style.border = String(bw)+'px solid '+bc;
        const bgOn = this.getProp('pillBgColor') || '#4ade80'; const bgOff = this.getProp('pillBgOff') || 'transparent'; b.style.background = on ? bgOn : bgOff;
        const txtOn = this.getProp('pillTextOnColor') || '#000'; const txtOff = this.getProp('pillTextOffColor') || 'inherit'; b.style.color = on ? txtOn : txtOff;
        /*__PILL_TEXT_STYLE__*/
        { const fam = (ov.fontFamily ?? this.getProp('fontFamily')) || 'System';
          const fw  = String(ov.fontWeight ?? (this.getProp('fontWeight')||400));
          const it  = (ov.italic ?? !!this.getProp('italic')) ? 'italic':'normal';
          const fs  = ov.fontSize ?? (this.getProp('fontSize') ?? 16);
          const unit= ov.fontSizeUnit ?? (this.getProp('fontSizeUnit')||'px');
          const col = ov.color ?? (this.getProp('color') || '#ffffff');
          const ls  = Number.isFinite(ov.letterSpacing)? ov.letterSpacing : (this.getProp('letterSpacing')||0);
          const lh  = Number.isFinite(ov.lineHeight)? ov.lineHeight : (this.getProp('lineHeight')||1.2);
          const sw  = Number((ov.strokeWidth ?? this.getProp('strokeWidth')) || 0);
          const sc  = ov.strokeColor ?? this.getProp('strokeColor');
          const shOn= (ov.hasOwnProperty('shadow') ? !!ov.shadow : !!(this.getProp('shadow') ?? true));
          const shC = ov.shadowColor ?? (this.getProp('shadowColor')||'rgba(0,0,0,0.5)');
          const dx  = Number((ov.shadowDx ?? this.getProp('shadowDx')) || 0);
          const dy  = Number((ov.shadowDy ?? this.getProp('shadowDy')) || 0);
          const bl  = Number((ov.shadowBlur ?? this.getProp('shadowBlur')) || 0);
          const fontMap={ 'System':'system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif','Inter':'Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif','Roboto':'Roboto, system-ui, -apple-system, Segoe UI, Arial, sans-serif','Arial':'Arial, Helvetica, sans-serif','Georgia':'Georgia, serif','Times New Roman':'"Times New Roman", Times, serif','Courier New':'"Courier New", monospace'};
          b.style.fontFamily = fontMap[fam] || fam;
          b.style.fontWeight = fw; b.style.fontStyle = it;
          b.style.fontSize   = (unit==='px'? String(fs)+'px' : String(fs)+unit);
          b.style.color      = on ? (ov.pillTextOnColor ?? this.getProp('pillTextOnColor') ?? col) : (ov.pillTextOffColor ?? this.getProp('pillTextOffColor') ?? col);
          b.style.letterSpacing = (Number.isFinite(ls)? ls:0)+'px';
          b.style.lineHeight  = Number.isFinite(lh)? String(lh) : '1.2';
          if(sw>0 && sc){ b.style.webkitTextStroke=`${sw}px ${sc}`; try{ b.style.textStroke=`${sw}px ${sc}`; }catch(e){} } else { b.style.webkitTextStroke=''; try{ b.style.textStroke=''; }catch(e){} }
          b.style.textShadow = shOn? `${dx}px ${dy}px ${bl}px ${shC}` : '';
        }
        b.addEventListener('click', ()=>{
          const set=new Set(this.getProp('values')||[]);
          if(set.has(i)) set.delete(i); else set.add(i);
          this.setProp('values', Array.from(set), {silent:true});
          // re-render
          this.updateDom();
        });
        const shCol=this.getProp('pillShadowColor')||''; const sdx=Number(this.getProp('pillShadowDx')||0); const sdy=Number(this.getProp('pillShadowDy')||0); const sblur=Number(this.getProp('pillShadowBlur')||0);
        if(shCol){ b.style.boxShadow = `${sdx}px ${sdy}px ${sblur}px ${shCol}`; }
        else { const shOn = this.getProp('shadow') ?? true; const tcol=this.getProp('shadowColor')||'rgba(0,0,0,0.5)'; const tdx=Number(this.getProp('shadowDx')||0); const tdy=Number(this.getProp('shadowDy')||0); const tblur=Number(this.getProp('shadowBlur')||6); b.style.boxShadow = shOn? `${tdx}px ${tdy}px ${tblur}px ${tcol}` : ''; }
        wrap.appendChild(b);
      });
      
    
    // __ALIGN_NON_PILLS__ â€“ align input/label for non-pill mode only
    (()=>{
      try{
        const sel = this.getProp('selectionStyle') || 'standard';
        if(sel==='pills') return; // do not affect pills
        const align = this.getProp('itemsAlign') || 'start'; // start|center|end
        const zoom = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
        const inputs = this.content.querySelectorAll('label input[type=checkbox]');
        inputs.forEach(inp=>{
          const lab = inp.parentElement;
          lab.style.whiteSpace='nowrap';
          if(align==='start'){
            // classic: input left + text right
            lab.style.display='block'; lab.style.position='relative';
            lab.style.paddingLeft='';
            inp.style.position='absolute';
            inp.style.left = String(4*zoom)+'px';
            inp.style.top  = '0px';
            inp.style.transformOrigin='left top'; inp.style.transform = `scale(${zoom})`;
            const padBase = (inp.offsetWidth || 16) + 6;
            lab.style.paddingLeft = String(padBase*zoom)+'px';
          }else if(align==='center'){
            // column: input on top, label under
            inp.style.position='static'; inp.style.left=''; inp.style.top='';
            inp.style.transformOrigin='center center'; inp.style.transform=`scale(${zoom})`;
            lab.style.display='flex'; lab.style.flexDirection='column'; lab.style.alignItems='center';
            lab.style.paddingLeft='0'; lab.style.gap=String((Number(this.getProp('labelGap')||6)*zoom))+'px';
          }else if(align==='end'){
            // row-reverse: label before, input after
            inp.style.position='static'; inp.style.left=''; inp.style.top='';
            inp.style.transformOrigin='center center'; inp.style.transform=`scale(${zoom})`;
            lab.style.display='flex'; lab.style.flexDirection='row-reverse'; lab.style.alignItems='center';
            lab.style.paddingLeft='0'; lab.style.gap=String((Number(this.getProp('labelGap')||6)*zoom))+'px';
          }
        });
      }catch(e){}
    })();
// apply group orientation (vertical/horizontal)
    (()=>{
      const dir = this.getProp('itemsDirection') || 'vertical';
      const zoom2 = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
      wrap.style.display='flex';
      wrap.style.flexDirection = (dir==='horizontal') ? 'row' : 'column';
      if(dir==='horizontal'){ const _itemsAlign = this.getProp('itemsAlign') || 'start'; const _map={start:'flex-start',center:'center',end:'flex-end'}; wrap.style.justifyContent = _map[_itemsAlign]||'flex-start'; }
      const _itemsAlign = this.getProp('itemsAlign') || 'start'; const _map={start:'flex-start',center:'center',end:'flex-end'}; wrap.style.alignItems = _map[_itemsAlign]||'flex-start';
      const _gap = Number.isFinite(this.getProp('itemsGap'))? Number(this.getProp('itemsGap')):6; const _gapBase = Number.isFinite(this.getProp('itemsGap')) ? Number(this.getProp('itemsGap')) : 6;
      const _add = Number(this.getProp('labelGap') || 0);
      const _dir = this.getProp('itemsDirection') || 'vertical';
      if(_dir==='horizontal'){
        wrap.style.columnGap = String((_gapBase + _add)*zoom)+'px';
        wrap.style.rowGap = String(_gapBase*zoom)+'px';
      }else{
        wrap.style.rowGap = String((_gapBase + _add)*zoom)+'px';
        wrap.style.columnGap = String(_gapBase*zoom)+'px';
      };
    })();
    
    this.content.appendChild(wrap);
    // post-layout adjust: position input with absolute + scale by zoom (like reference build)
    (()=>{
      const zoom2 = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
      const nodes = this.content.querySelectorAll('label > input[type=checkbox]');
      nodes.forEach(inp => {
        const lab = inp.parentElement;
        lab.style.position='relative';
        inp.style.position='absolute';
        inp.style.left = String(4*zoom2)+'px';
        inp.style.top = '0px';
        inp.style.transformOrigin='left top';
        inp.style.transform = `scale(${zoom2})`;
        const padBase = (inp.offsetWidth || 16) + 6;
        lab.style.paddingLeft = String(padBase*zoom2)+'px';
      });
    })();
    
      return;
    }

    wrap.style.display='flex'; wrap.style.flexDirection='column'; const __zoom=(this.stage&&this.stage.zoom)?this.stage.zoom:1; wrap.style.gap=String(6*__zoom)+'px';
    const items = this.getProp('items') || [];
    const valuesSet = new Set(this.getProp('values') || []);
    items.forEach((txt,i)=>{
      const lab = document.createElement('label'); lab.style.display='block'; lab.style.width='100%'; lab.style.boxSizing='border-box'; lab.style.whiteSpace='nowrap';
      const input = document.createElement('input');
      input.type='checkbox';
      input.checked = valuesSet.has(i);
      input.addEventListener('change', ()=>{
        if(input.checked) valuesSet.add(i); else valuesSet.delete(i);
        this.setProp('values', Array.from(valuesSet), {silent:true});
      });
      lab.appendChild(input);
      lab.append(' '+String(txt));
      wrap.appendChild(lab);
    });
    
    // apply group orientation (vertical/horizontal)
    (()=>{
      const dir = this.getProp('itemsDirection') || 'vertical';
      const zoom2 = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
      wrap.style.display='flex';
      wrap.style.flexDirection = (dir==='horizontal') ? 'row' : 'column';
      if(dir==='horizontal'){ const _itemsAlign = this.getProp('itemsAlign') || 'start'; const _map={start:'flex-start',center:'center',end:'flex-end'}; wrap.style.justifyContent = _map[_itemsAlign]||'flex-start'; }
      const _itemsAlign = this.getProp('itemsAlign') || 'start'; const _map={start:'flex-start',center:'center',end:'flex-end'}; wrap.style.alignItems = _map[_itemsAlign]||'flex-start';
      const _gap = Number.isFinite(this.getProp('itemsGap'))? Number(this.getProp('itemsGap')):6; wrap.style.gap = String(_gap*zoom2)+'px';
    })();
    
    this.content.appendChild(wrap);
    // post-layout adjust: position input with absolute + scale by zoom (like reference build)
    (()=>{
      const zoom2 = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
      const nodes = this.content.querySelectorAll('label > input[type=checkbox]');
      nodes.forEach(inp => {
        const lab = inp.parentElement;
        lab.style.position='relative';
        inp.style.position='absolute';
        inp.style.left = String(4*zoom2)+'px';
        inp.style.top = '0px';
        inp.style.transformOrigin='left top';
        inp.style.transform = `scale(${zoom2})`;
        const padBase = (inp.offsetWidth || 16) + 6;
        lab.style.paddingLeft = String(padBase*zoom2)+'px';
      });
    })();
    

    const fontMap = {
      'System':'system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif',
      'Inter':'Inter, system-ui, -apple-system, Segoe UI, Roboto, Arial, sans-serif',
      'Roboto':'Roboto, system-ui, -apple-system, Segoe UI, Arial, sans-serif',
      'Arial':'Arial, Helvetica, sans-serif',
      'Georgia':'Georgia, serif',
      'Times New Roman':'"Times New Roman", Times, serif',
      'Courier New':'"Courier New", monospace'
    };
    const baseFam = this.getProp('fontFamily') || 'System';
    const baseFw  = String(this.getProp('fontWeight') || 400);
    const baseIt  = this.getProp('italic') ? 'italic' : 'normal';
    const baseFs  = this.getProp('fontSize') ?? 16;
    const baseUnit= this.getProp('fontSizeUnit') || 'px';
    const baseColor = this.getProp('color') || '#ffffff';
    const baseLs = this.getProp('letterSpacing');
    const baseLh = this.getProp('lineHeight');
    const baseSw = Number(this.getProp('strokeWidth')||0);
    const baseSc = this.getProp('strokeColor');
    const baseSh = this.getProp('shadowColor') || 'rgba(0,0,0,0.5)';
    const baseDx = Number(this.getProp('shadowDx')||0);
    const baseDy = Number(this.getProp('shadowDy')||0);
    const baseBlur = Number(this.getProp('shadowBlur')||6);
    const styles = this.getProp('itemStyles') || {};

    (wrap.querySelectorAll('label')||[]).forEach((lbl,i)=>{
      // layout: make radio/checkbox absolute and scale indent by zoom so wrapping is stable across zoom
      const inp = lbl.querySelector('input');
      const zoom2 = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
      if(inp){
        lbl.style.position='relative';
        inp.style.position='absolute';
        inp.style.left = (4*zoom2)+'px';
        // vertical align near text mid
        inp.style.top = '0.2em';
        const baseCtl = 16; const gap = Number(this.getProp('labelGap')||8); const padBase = baseCtl + gap;
        lbl.style.paddingLeft = String(padBase*zoom2)+'px';
      }
    
      const ov = Object.assign({}, styles[i]||{});
      const fam = ov.fontFamily ?? baseFam;
      lbl.style.fontFamily = fontMap[fam] || fam;
      lbl.style.fontWeight = String(ov.fontWeight ?? baseFw);
      lbl.style.fontStyle = (ov.italic ?? (baseIt==='italic')) ? 'italic' : 'normal';
      const fs = ov.fontSize ?? baseFs;
      const unit = ov.fontSizeUnit ?? baseUnit;
      const zoom = (this.stage && this.stage.zoom) ? this.stage.zoom : 1;
      lbl.style.fontSize = (unit==='px' ? String(fs*zoom)+'px' : String(fs)+unit);
      lbl.style.color = ov.color ?? baseColor;
      const ls = ov.letterSpacing ?? baseLs; lbl.style.letterSpacing = (Number.isFinite(ls)? ls : 0)+'px';
      const lh = ov.lineHeight ?? baseLh; lbl.style.lineHeight = Number.isFinite(lh)? String(lh) : '1.2';
      const sw = Number(ov.strokeWidth ?? baseSw); const sc = ov.strokeColor ?? baseSc;
      if(sw>0 && sc){ lbl.style.webkitTextStroke=`${sw}px ${sc}`; try{ lbl.style.textStroke=`${sw}px ${sc}`;}catch(e){} } else { lbl.style.webkitTextStroke=''; try{ lbl.style.textStroke=''; }catch(e){} }
      const shOn = (ov.hasOwnProperty('shadow') ? !!ov.shadow : !!(this.getProp('shadow') ?? true));
      const shCol = ov.shadowColor ?? baseSh; const dx = Number(ov.shadowDx ?? baseDx); const dy = Number(ov.shadowDy ?? baseDy); const blur = Number(ov.shadowBlur ?? baseBlur);
      lbl.style.textShadow = shOn ? `${dx}px ${dy}px ${blur}px ${shCol}` : '';
    });
  }
}
CheckboxGroupElement.type = 'checkboxgroup';
registry.registerElement(CheckboxGroupElement.type, CheckboxGroupElement);
